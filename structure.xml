<?xml version="1.0" encoding="UTF-8" standalone="no"?><Packages><Package depth="../../../" display="com.apamax.authentication" name="com.apamax.authentication"><Type category="Event" name="SessionCacheEntry" private="true"><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Import library="AuthenticationPlugin" name="plugin" private="true"><Description/><Summary/><TypeParameters/></Import><Member name="token" private="true" type="string"><Description/><Summary/><TypeParameters/></Member><Member name="user" private="true" type="string"><Description/><Summary/><TypeParameters/></Member><Member name="created" private="true" type="float"><Description/><Summary/><TypeParameters/></Member><Member name="lastSeen" private="true" type="float"><Description/><Summary/><TypeParameters/></Member><Action name="valid" staticNature=""><Description><![CDATA[Check the validity of a SessionCacheEntry, with the given timeout parameters.]]></Description><Summary><![CDATA[Check the validity of a SessionCacheEntry, with the given timeout parameters.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/><Parameters><Parameter name="timeoutSecs" type="float"/><Parameter name="maxSessionLengthSecs" type="float"/></Parameters></Action><Action name="create" staticNature="static "><Description><![CDATA[Create a SessionCacheEntry and generate a new token.]]></Description><Summary><![CDATA[Create a SessionCacheEntry and generate a new token.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.authentication" type="SessionCacheEntry"/><Parameters><Parameter name="user" type="string"/></Parameters></Action><Action name="update" staticNature=""><Description><![CDATA[Update the last-seen timestamp on this cache entry.]]></Description><Summary><![CDATA[Update the last-seen timestamp on this cache entry.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/></Action></Type><Type category="Event" name="Base64"><Description><![CDATA[Encoding and decoding support for base-64. Converts between a UTF-8 string and a base-64-encoded string.]]></Description><Summary><![CDATA[Encoding and decoding support for base-64. Converts between a UTF-8 string and a base-64-encoded string.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Import library="AuthenticationPlugin" name="plugin" private="true"><Description/><Summary/><TypeParameters/></Import><Action name="encode" staticNature="static "><Description><![CDATA[Encode a string in base-64.]]></Description><Summary><![CDATA[Encode a string in base-64.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Throws><Description><![CDATA[PluginException if the encoding failed.]]></Description></Throws><Returns type="string"><Description><![CDATA[The string encoded in base-64.]]></Description></Returns><Parameters><Parameter name="s" type="string"><Description><![CDATA[The input string.]]></Description></Parameter></Parameters></Action><Action name="decode" staticNature="static "><Description><![CDATA[Decode a string from base-64.]]></Description><Summary><![CDATA[Decode a string from base-64.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Throws><Description><![CDATA[PluginException if the decoding failed.]]></Description></Throws><Returns type="string"><Description><![CDATA[The decoded string.]]></Description></Returns><Parameters><Parameter name="s" type="string"><Description><![CDATA[A base-64 encoded string.]]></Description></Parameter></Parameters></Action></Type><Type category="Event" name="User" private="true"><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="name" type="string"><TypeParameters/></Member><Member name="password" type="string"><TypeParameters/></Member><Member name="groups" type="sequence"><Parameters><Parameter type="string"/></Parameters><TypeParameters/></Member><Action name="hasGroup" staticNature=""><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/><Parameters><Parameter name="#group" type="string"/></Parameters></Action></Type><Type category="Event" name="Authentication"><Description><![CDATA[An authentication database storing hashed and salted passwords in a MemoryStore database either in memory or on disk.]]></Description><Summary><![CDATA[An authentication database storing hashed and salted passwords in a MemoryStore database either in memory or on disk.]]></Summary><TypeParameters/><See action="createFromStore" package="com.apamax.authentication" type="Authentication"><Description><![CDATA[Authentication objects must be created using one of the static create actions.]]></Description></See><See action="createFromPath" package="com.apamax.authentication" type="Authentication"><Description><![CDATA[Authentication objects must be created using one of the static create actions.]]></Description></See><See action="createInMemory" package="com.apamax.authentication" type="Authentication"><Description><![CDATA[Authentication objects must be created using one of the static create actions.]]></Description></See><See action="initialize" package="com.apamax.authentication" type="Authentication"><Description><![CDATA[Authentication objects must be initialized after creation using the initialize action.]]></Description></See><Routes><Reference package="com.apamax.authentication" type="AuthenticationInitialized"/></Routes><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Import library="AuthenticationPlugin" name="plugin" private="true"><Description/><Summary/><TypeParameters/></Import><Member constant="true" name="INIT_FROM_STORE" private="true" type="integer" typeValue="0"><Description/><Summary/><TypeParameters/></Member><Member constant="true" name="INIT_FROM_PATH" private="true" type="integer" typeValue="1"><Description/><Summary/><TypeParameters/></Member><Member constant="true" name="INIT_IN_MEMORY" private="true" type="integer" typeValue="2"><Description/><Summary/><TypeParameters/></Member><Member name="storage" private="true" type="com.apama.memorystore.Storage"><Description/><Summary/><TypeParameters/></Member><Member name="path" private="true" type="string"><Description/><Summary/><TypeParameters/></Member><Member name="initMode" private="true" type="integer"><Description/><Summary/><TypeParameters/></Member><Member name="store" private="true" type="com.apama.memorystore.Store"><Description/><Summary/><TypeParameters/></Member><Member name="users" private="true" type="com.apama.memorystore.Table"><Description/><Summary/><TypeParameters/></Member><Action name="createFromPath" staticNature="static "><Description><![CDATA[Create an Authentication database in the given path on disk.]]></Description><Summary><![CDATA[Create an Authentication database in the given path on disk.]]></Summary><TypeParameters/><See action="initialize" package="com.apamax.authentication" type="Authentication"><Description><![CDATA[The Authentication object must be initialized after creation.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.authentication" type="Authentication"><Description><![CDATA[A new Authentication object.]]></Description></Returns><Parameters><Parameter name="path" type="string"/></Parameters></Action><Action name="setPassword" staticNature=""><Description><![CDATA[Set the password of a user.]]></Description><Summary><![CDATA[Set the password of a user.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Throws><Description><![CDATA[IllegalArgumentException if the username is not found.]]></Description></Throws><Parameters><Parameter name="username" type="string"/><Parameter name="password" type="string"><Description><![CDATA[The new password.]]></Description></Parameter></Parameters></Action><Action name="addUser" staticNature=""><Description><![CDATA[Add a user to the authentication database. Replaces an existing user's password and groups. The password is stored salted and hashed using MD5 crypt() password hashing.]]></Description><Summary><![CDATA[Add a user to the authentication database. Replaces an existing user's password and groups. The password is stored salted and hashed using MD5 crypt() password hashing.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="username" type="string"><Description><![CDATA[The username of the new user.]]></Description></Parameter><Parameter name="password" type="string"><Description><![CDATA[The password of the new user.]]></Description></Parameter><Parameter name="groups" type="sequence"><Parameters><Parameter type="string"/></Parameters><Description><![CDATA[The groups this user is a member of.]]></Description></Parameter></Parameters></Action><Action name="createFromStore" staticNature="static "><Description><![CDATA[Create an Authentication database within an already created and prepared store in the application.]]></Description><Summary><![CDATA[Create an Authentication database within an already created and prepared store in the application.]]></Summary><TypeParameters/><See action="initialize" package="com.apamax.authentication" type="Authentication"><Description><![CDATA[The Authentication object must be initialized after creation.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.authentication" type="Authentication"><Description><![CDATA[A new Authentication object.]]></Description></Returns><Parameters><Parameter name="s" type="com.apama.memorystore.Store"><Description><![CDATA[A prepared and open Store object.]]></Description></Parameter></Parameters></Action><Action name="hasUser" staticNature=""><Description><![CDATA[Returns true if the database has a user of a given name.]]></Description><Summary><![CDATA[Returns true if the database has a user of a given name.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"><Description><![CDATA[True if the database has the user, false if not.]]></Description></Returns><Parameters><Parameter name="username" type="string"><Description><![CDATA[The name of the user to check.]]></Description></Parameter></Parameters></Action><Action name="createInMemory" staticNature="static "><Description><![CDATA[Create an Authentication database purely in memory. The contents will not persist between runs of the correlator.]]></Description><Summary><![CDATA[Create an Authentication database purely in memory. The contents will not persist between runs of the correlator.]]></Summary><TypeParameters/><See action="initialize" package="com.apamax.authentication" type="Authentication"><Description><![CDATA[The Authentication object must be initialized after creation.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.authentication" type="Authentication"><Description><![CDATA[A new Authentication object.]]></Description></Returns></Action><Action name="checkUser" staticNature=""><Description><![CDATA[Check a users password.]]></Description><Summary><![CDATA[Check a users password.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"><Description><![CDATA[True if the user is in the database and the password matches, false otherwise.]]></Description></Returns><Parameters><Parameter name="username" type="string"><Description><![CDATA[The username to check.]]></Description></Parameter><Parameter name="password" type="string"><Description><![CDATA[The password to check.]]></Description></Parameter></Parameters></Action><Action name="removeUser" staticNature=""><Description><![CDATA[Remove a user from the authentication database. Does nothing silently if the user does not exist.]]></Description><Summary><![CDATA[Remove a user from the authentication database. Does nothing silently if the user does not exist.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="username" type="string"><Description><![CDATA[The username of the user to remove.]]></Description></Parameter></Parameters></Action><Action name="checkRequest" staticNature=""><Description><![CDATA[Check an HTTP basic Authorization header in an HTTP Request against the database.]]></Description><Summary><![CDATA[Check an HTTP basic Authorization header in an HTTP Request against the database.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Throws><Description><![CDATA[IllegalArgumentException If the header is not a properly formed HTTP basic header.]]></Description></Throws><Returns type="string"><Description><![CDATA[The corresponding username if the user exists and the password matches, "" otherwise.]]></Description></Returns><Parameters><Parameter name="req" type="com.softwareag.connectivity.httpclient.Request"><Description><![CDATA[The request object to check.]]></Description></Parameter></Parameters></Action><Action name="hasGroup" staticNature=""><Description><![CDATA[Checks if a user is a member of a given group.]]></Description><Summary><![CDATA[Checks if a user is a member of a given group.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"><Description><![CDATA[True if the username exists and is in the group, false otherwise.]]></Description></Returns><Parameters><Parameter name="username" type="string"><Description><![CDATA[The username to check.]]></Description></Parameter><Parameter name="#group" type="string"><Description><![CDATA[The group to check.]]></Description></Parameter></Parameters></Action><Action name="initFromStore" staticNature=""><TypeParameters/><Routes><Reference package="com.apamax.authentication" type="AuthenticationInitialized"/></Routes><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="store" type="com.apama.memorystore.Store"/><Parameter name="id" type="integer"/></Parameters></Action><Action name="checkHeader" staticNature=""><Description><![CDATA[Check an HTTP basic Authorization header against the database.]]></Description><Summary><![CDATA[Check an HTTP basic Authorization header against the database.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Throws><Description><![CDATA[IllegalArgumentException If the header is not a properly formed HTTP basic header.]]></Description></Throws><Returns type="string"><Description><![CDATA[The corresponding username if the user exists and the password matches, "" otherwise.]]></Description></Returns><Parameters><Parameter name="authHeader" type="string"><Description><![CDATA[The HTTP basic header value.]]></Description></Parameter></Parameters></Action><Action name="initialize" staticNature=""><Description><![CDATA[Initialize the Authentication database. The database cannot be used until this has completed and routed an AuthenticationInitialized event. It should be called like: <pre> on AuthenticationInitialized(auth.initialize()) { // you can use auth here } </pre>]]></Description><Summary><![CDATA[Initialize the Authentication database. The database cannot be used until this has completed and routed an AuthenticationInitialized event. It should be called like: <pre> on AuthenticationInitialized(auth.initialize()) { // you can use auth here } </pre>]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"><Description><![CDATA[An ID for the associated AuthenticationInitialized completion event.]]></Description></Returns></Action><Action name="setGroups" staticNature=""><Description><![CDATA[Set the groups of a user.]]></Description><Summary><![CDATA[Set the groups of a user.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Throws><Description><![CDATA[IllegalArgumentException if the username is not found.]]></Description></Throws><Parameters><Parameter name="username" type="string"/><Parameter name="groups" type="sequence"><Parameters><Parameter type="string"/></Parameters><Description><![CDATA[The replacement groups.]]></Description></Parameter></Parameters></Action><Action name="getGroups" staticNature=""><Description><![CDATA[Return the groups for a given user.]]></Description><Summary><![CDATA[Return the groups for a given user.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Throws><Description><![CDATA[IllegalArgumentException If the username is not found.]]></Description></Throws><Returns type="sequence"><Parameters><Parameter type="string"/></Parameters><Description><![CDATA[The groups the user is a member of.]]></Description></Returns><Parameters><Parameter name="username" type="string"><Description><![CDATA[The username to check.]]></Description></Parameter></Parameters></Action></Type><Type category="Event" name="AuthenticationInitialized"><Description><![CDATA[Event sent when an Authentication or CachedAuthentication object has finished initializing.]]></Description><Summary><![CDATA[Event sent when an Authentication or CachedAuthentication object has finished initializing.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="id" type="integer"><Description><![CDATA[The ID returned from the corresponding initialize() call.]]></Description><Summary><![CDATA[The ID returned from the corresponding initialize() call.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="HTTPBasic"><Description><![CDATA[Read and create HTTP basic headers.]]></Description><Summary><![CDATA[Read and create HTTP basic headers.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Import library="AuthenticationPlugin" name="plugin"><Description><![CDATA[private]]></Description><Summary><![CDATA[private]]></Summary><TypeParameters/></Import><Member name="username" private="true" type="string"><Description/><Summary/><TypeParameters/></Member><Member name="password" private="true" type="string"><Description/><Summary/><TypeParameters/></Member><Action name="createFromCreds" staticNature="static "><Description><![CDATA[Create an HTTPBasic object from a username and password.]]></Description><Summary><![CDATA[Create an HTTPBasic object from a username and password.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.authentication" type="HTTPBasic"><Description><![CDATA[A new HTTPBasic object representing the given authentication data.]]></Description></Returns><Parameters><Parameter name="username" type="string"/><Parameter name="password" type="string"/></Parameters></Action><Action name="addAuthHeader" staticNature=""><Description><![CDATA[Adds an Authorization header to the given request.]]></Description><Summary><![CDATA[Adds an Authorization header to the given request.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="req" type="com.softwareag.connectivity.httpclient.Request"><Description><![CDATA[The request to add the header to.]]></Description></Parameter></Parameters></Action><Action name="getPassword" staticNature=""><Description><![CDATA[Returns the password for these credentials.]]></Description><Summary><![CDATA[Returns the password for these credentials.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/></Action><Action name="getUser" staticNature=""><Description><![CDATA[Returns the username for these credentials.]]></Description><Summary><![CDATA[Returns the username for these credentials.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/></Action><Action name="createFromAuth" staticNature="static "><Description><![CDATA[Create an HTTPBasic object from an Authorization header.]]></Description><Summary><![CDATA[Create an HTTPBasic object from an Authorization header.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Throws><Description><![CDATA[IllegalArgumentException if auth is not a properly formatted header.]]></Description></Throws><Returns package="com.apamax.authentication" type="HTTPBasic"><Description><![CDATA[A new HTTPBasic object representing the encapsulated authentication data.]]></Description></Returns><Parameters><Parameter name="auth" type="string"><Description><![CDATA[A correctly formatted Authorization header (eg "Basic mXwvknIEinIne=").]]></Description></Parameter></Parameters></Action><Action name="getAuthHeader" staticNature=""><Description><![CDATA[Returns an Authorization header for these credentials. (eg "Basic mXwvknIEinIne=").]]></Description><Summary><![CDATA[Returns an Authorization header for these credentials. (eg "Basic mXwvknIEinIne=").]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/></Action></Type><Type category="Event" name="AuthResult"><Description><![CDATA[The results of an auth check against a CachedAuthentication object.]]></Description><Summary><![CDATA[The results of an auth check against a CachedAuthentication object.]]></Summary><TypeParameters/><See action="checkHeader" package="com.apamax.authentication" type="CachedAuthentication"><Description><![CDATA[This functions returns AuthResult objects.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member constant="true" name="AUTH_FAILED" type="integer" typeValue="0"><Description><![CDATA[A result of a failed authentication.]]></Description><Summary><![CDATA[A result of a failed authentication.]]></Summary><TypeParameters/></Member><Member constant="true" name="AUTH_REQUIRED" type="integer" typeValue="1"><Description><![CDATA[A result that authorization was not given, but is required.]]></Description><Summary><![CDATA[A result that authorization was not given, but is required.]]></Summary><TypeParameters/></Member><Member constant="true" name="TOKEN_EXPIRED" type="integer" typeValue="2"><Description><![CDATA[A result with an authorization token which has expired, password authentication should now be attempted.]]></Description><Summary><![CDATA[A result with an authorization token which has expired, password authentication should now be attempted.]]></Summary><TypeParameters/></Member><Member constant="true" name="NEW_TOKEN" type="integer" typeValue="3"><Description><![CDATA[A result that authentication has succeeded, but a potentially new token has been generated and should be stored and used.]]></Description><Summary><![CDATA[A result that authentication has succeeded, but a potentially new token has been generated and should be stored and used.]]></Summary><TypeParameters/></Member><Member constant="true" name="AUTH_SUCCEEDED" type="integer" typeValue="4"><Description><![CDATA[A result that authentication has succeeded. Also provides the token, but the expectation is that the client already has it.]]></Description><Summary><![CDATA[A result that authentication has succeeded. Also provides the token, but the expectation is that the client already has it.]]></Summary><TypeParameters/></Member><Member name="result" type="integer"><Description><![CDATA[The result of this auth check. Should be one of AUTH_FAILED, AUTH_REQUIRED, TOKEN_EXPIRED, NEW_TOKEN or AUTH_SUCCEEDED. AUTH_SUCCEEDED and NEW_TOKEN are success results. AUTH_REQUIRED and TOKEN_EXPIRED are temporary failure results. AUTH_FAILED is a permanent failure result.]]></Description><Summary><![CDATA[The result of this auth check. Should be one of AUTH_FAILED, AUTH_REQUIRED, TOKEN_EXPIRED, NEW_TOKEN or AUTH_SUCCEEDED. AUTH_SUCCEEDED and NEW_TOKEN are success results. AUTH_REQUIRED and TOKEN_EXPIRED are temporary failure results. AUTH_FAILED is a permanent failure result.]]></Summary><TypeParameters/></Member><Member name="user" type="string"><Description><![CDATA[The username that was authenticated (if successful).]]></Description><Summary><![CDATA[The username that was authenticated (if successful).]]></Summary><TypeParameters/></Member><Member name="tokenHeader" type="string"><Description><![CDATA[A currently valid token for this user (if successful).]]></Description><Summary><![CDATA[A currently valid token for this user (if successful).]]></Summary><TypeParameters/></Member><Action name="success" staticNature=""><Description><![CDATA[Returns true if this result contains a success outcome.]]></Description><Summary><![CDATA[Returns true if this result contains a success outcome.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/></Action></Type><Type category="Event" name="SessionCache"><Description><![CDATA[An event which holds a cache of user sessions and tokens. Sessions have a timeout within which they must be refreshed to continue the session, and a maximum session length after which the session will expire even if refreshed.]]></Description><Summary><![CDATA[An event which holds a cache of user sessions and tokens. Sessions have a timeout within which they must be refreshed to continue the session, and a maximum session length after which the session will expire even if refreshed.]]></Summary><TypeParameters/><See action="create" package="com.apamax.authentication" type="SessionCache"><Description><![CDATA[Session caches must be created with the create static action.]]></Description></See><See action="destroy" package="com.apamax.authentication" type="SessionCache"><Description><![CDATA[Session caches must be destroyed with the destroy action before disposing of them.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="cache" private="true" type="dictionary"><Parameters><Parameter type="string"/><Parameter package="com.apamax.authentication" type="SessionCacheEntry"/></Parameters><Description/><Summary/><TypeParameters/></Member><Member name="timeoutSecs" private="true" type="float"><Description/><Summary/><TypeParameters/></Member><Member name="maxSessionLengthSecs" private="true" type="float"><Description/><Summary/><TypeParameters/></Member><Member name="gcListener" private="true" type="listener"><Description/><Summary/><TypeParameters/></Member><Action name="add" staticNature=""><Description><![CDATA[Add a new cache entry for a user and return the token. Should be called after authenticating the user via another means.]]></Description><Summary><![CDATA[Add a new cache entry for a user and return the token. Should be called after authenticating the user via another means.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/><Parameters><Parameter name="user" type="string"><Description><![CDATA[The user to add the entry for.]]></Description></Parameter></Parameters></Action><Action name="create" staticNature="static "><Description><![CDATA[Create a SesseionCache object.]]></Description><Summary><![CDATA[Create a SesseionCache object.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.authentication" type="SessionCache"><Description><![CDATA[A new SessionCache.]]></Description></Returns><Parameters><Parameter name="timeoutSecs" type="integer"><Description><![CDATA[Cache entries must be checked at least once every timeoutSecs or they will expire.]]></Description></Parameter><Parameter name="maxSessionLengthSecs" type="integer"><Description><![CDATA[Cache entries will always expire after at most maxSessionLengthSecs.]]></Description></Parameter></Parameters></Action><Action name="destroy" staticNature=""><Description><![CDATA[Stop the background garbage collection listener. Must be called before discarding the last reference to the SessionCache.]]></Description><Summary><![CDATA[Stop the background garbage collection listener. Must be called before discarding the last reference to the SessionCache.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/></Action><Action name="checkHeader" staticNature=""><Description><![CDATA[Check whether an Authorization headers contains a valid token. If valid, refreshes the timestamp on the cache entry.]]></Description><Summary><![CDATA[Check whether an Authorization headers contains a valid token. If valid, refreshes the timestamp on the cache entry.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Throws><Description><![CDATA[IllegalArgumentException if it is not a CacheToken header.]]></Description></Throws><Returns type="string"><Description><![CDATA[The user for the token if valid, "" if not.]]></Description></Returns><Parameters><Parameter name="header" type="string"/></Parameters></Action><Action name="expireAll" staticNature=""><Description><![CDATA[Remove all cache entries for a given user.]]></Description><Summary><![CDATA[Remove all cache entries for a given user.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="user" type="string"><Description><![CDATA[The user to expire cache entries for.]]></Description></Parameter></Parameters></Action><Action name="check" staticNature=""><Description><![CDATA[Check whether a token is a valid session. If valid, refreshes the timestamp on the cache entry.]]></Description><Summary><![CDATA[Check whether a token is a valid session. If valid, refreshes the timestamp on the cache entry.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"><Description><![CDATA[The user for the token if valid, "" if not.]]></Description></Returns><Parameters><Parameter name="token" type="string"><Description><![CDATA[The session token to check.]]></Description></Parameter></Parameters></Action></Type><Type category="Event" name="CachedAuthentication"><Description><![CDATA[An authentication database storing hashed and salted passwords in a MemoryStore database either in memory or on disk. Includes a session cache for authenticating with a session token instead.]]></Description><Summary><![CDATA[An authentication database storing hashed and salted passwords in a MemoryStore database either in memory or on disk. Includes a session cache for authenticating with a session token instead.]]></Summary><TypeParameters/><See action="createFromStore" package="com.apamax.authentication" type="CachedAuthentication"><Description><![CDATA[CachedAuthentication objects must be created using one of the static create actions.]]></Description></See><See action="createFromPath" package="com.apamax.authentication" type="CachedAuthentication"><Description><![CDATA[CachedAuthentication objects must be created using one of the static create actions.]]></Description></See><See action="createInMemory" package="com.apamax.authentication" type="CachedAuthentication"><Description><![CDATA[CachedAuthentication objects must be created using one of the static create actions.]]></Description></See><See action="initialize" package="com.apamax.authentication" type="CachedAuthentication"><Description><![CDATA[CachedAuthentication objects must be initialized after creation using the initialize action.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="auth" package="com.apamax.authentication" private="true" type="Authentication"><Description/><Summary/><TypeParameters/></Member><Member name="session" package="com.apamax.authentication" private="true" type="SessionCache"><Description/><Summary/><TypeParameters/></Member><Action name="createFromPath" staticNature="static "><Description><![CDATA[Create an CachedAuthentication database in the given path on disk.]]></Description><Summary><![CDATA[Create an CachedAuthentication database in the given path on disk.]]></Summary><TypeParameters/><See action="initialize" package="com.apamax.authentication" type="CachedAuthentication"><Description><![CDATA[The CachedAuthentication object must be initialized after creation.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.authentication" type="CachedAuthentication"><Description><![CDATA[A new CachedAuthentication object.]]></Description></Returns><Parameters><Parameter name="path" type="string"/><Parameter name="timeoutSecs" type="integer"/><Parameter name="maxSessionLengthSecs" type="integer"/></Parameters></Action><Action name="setPassword" staticNature=""><Description><![CDATA[Set the password of a user.]]></Description><Summary><![CDATA[Set the password of a user.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Throws><Description><![CDATA[IllegalArgumentException if the username is not found.]]></Description></Throws><Parameters><Parameter name="username" type="string"/><Parameter name="password" type="string"><Description><![CDATA[The new password.]]></Description></Parameter></Parameters></Action><Action name="addUser" staticNature=""><Description><![CDATA[Add a user to the authentication database. Replaces an existing user's password. The password is stored salted and hashed using MD5 crypt() password hashing.]]></Description><Summary><![CDATA[Add a user to the authentication database. Replaces an existing user's password. The password is stored salted and hashed using MD5 crypt() password hashing.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="username" type="string"><Description><![CDATA[The username of the new user.]]></Description></Parameter><Parameter name="password" type="string"><Description><![CDATA[The password of the new user.]]></Description></Parameter><Parameter name="groups" type="sequence"><Parameters><Parameter type="string"/></Parameters></Parameter></Parameters></Action><Action name="createFromStore" staticNature="static "><Description><![CDATA[Create a CachedAuthentication database within an already created and prepared store in the application.]]></Description><Summary><![CDATA[Create a CachedAuthentication database within an already created and prepared store in the application.]]></Summary><TypeParameters/><See action="initialize" package="com.apamax.authentication" type="CachedAuthentication"><Description><![CDATA[The CachedAuthentication object must be initialized after creation.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.authentication" type="CachedAuthentication"><Description><![CDATA[A new CachedAuthentication object.]]></Description></Returns><Parameters><Parameter name="s" type="com.apama.memorystore.Store"><Description><![CDATA[A prepared and open Store object.]]></Description></Parameter><Parameter name="timeoutSecs" type="integer"/><Parameter name="maxSessionLengthSecs" type="integer"/></Parameters></Action><Action name="hasUser" staticNature=""><Description><![CDATA[Returns true if the database has a user of a given name.]]></Description><Summary><![CDATA[Returns true if the database has a user of a given name.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"><Description><![CDATA[True if the database has the user, false if not.]]></Description></Returns><Parameters><Parameter name="username" type="string"><Description><![CDATA[The name of the user to check.]]></Description></Parameter></Parameters></Action><Action name="createInMemory" staticNature="static "><Description><![CDATA[Create an CachedAuthentication database purely in memory. The contents will not persist between runs of the correlator.]]></Description><Summary><![CDATA[Create an CachedAuthentication database purely in memory. The contents will not persist between runs of the correlator.]]></Summary><TypeParameters/><See action="initialize" package="com.apamax.authentication" type="CachedAuthentication"><Description><![CDATA[The CachedAuthentication object must be initialized after creation.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.authentication" type="CachedAuthentication"><Description><![CDATA[A new CachedAuthentication object.]]></Description></Returns><Parameters><Parameter name="timeoutSecs" type="integer"/><Parameter name="maxSessionLengthSecs" type="integer"/></Parameters></Action><Action name="checkUser" staticNature=""><Description><![CDATA[Check a users password.]]></Description><Summary><![CDATA[Check a users password.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"><Description><![CDATA[True if the user is in the database and the password matches, false otherwise.]]></Description></Returns><Parameters><Parameter name="username" type="string"><Description><![CDATA[The username to check.]]></Description></Parameter><Parameter name="password" type="string"><Description><![CDATA[The password to check.]]></Description></Parameter></Parameters></Action><Action name="removeUser" staticNature=""><Description><![CDATA[Remove a user from the authentication database. Does nothing silently if the user does not exist.]]></Description><Summary><![CDATA[Remove a user from the authentication database. Does nothing silently if the user does not exist.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="username" type="string"><Description><![CDATA[The username of the user to remove.]]></Description></Parameter></Parameters></Action><Action name="checkRequest" staticNature=""><Description><![CDATA[Check the HTTP Authorization header in a Request. Will validate either an HTTP Basic auth header or a CacheToken session cache token.]]></Description><Summary><![CDATA[Check the HTTP Authorization header in a Request. Will validate either an HTTP Basic auth header or a CacheToken session cache token.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Throws><Description><![CDATA[IllegalArgumentException If the header is not a properly formed HTTP basic header.]]></Description></Throws><Returns package="com.apamax.authentication" type="AuthResult"><Description><![CDATA[An AuthResult describing whether the header was validated, the user it corresponds to and a new authentication token to use]]></Description></Returns><Parameters><Parameter name="req" type="com.softwareag.connectivity.httpclient.Request"><Description><![CDATA[The request object to check.]]></Description></Parameter></Parameters></Action><Action name="hasGroup" staticNature=""><Description><![CDATA[Checks if a user is a member of a given group.]]></Description><Summary><![CDATA[Checks if a user is a member of a given group.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"><Description><![CDATA[True if the username exists and is in the group, false otherwise.]]></Description></Returns><Parameters><Parameter name="username" type="string"><Description><![CDATA[The username to check.]]></Description></Parameter><Parameter name="#group" type="string"><Description><![CDATA[The group to check.]]></Description></Parameter></Parameters></Action><Action name="checkHeader" staticNature=""><Description><![CDATA[Check an HTTP Authorization header. Will validate either an HTTP Basic auth header or a CacheToken session cache token.]]></Description><Summary><![CDATA[Check an HTTP Authorization header. Will validate either an HTTP Basic auth header or a CacheToken session cache token.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Throws><Description><![CDATA[IllegalArgumentException If the header is not a properly formed HTTP basic header.]]></Description></Throws><Returns package="com.apamax.authentication" type="AuthResult"><Description><![CDATA[An AuthResult describing whether the header was validated, the user it corresponds to and a new authentication token to use]]></Description></Returns><Parameters><Parameter name="authHeader" type="string"><Description><![CDATA[Either an HTTP Basic auth header or a CacheToken session cache token.]]></Description></Parameter></Parameters></Action><Action name="initialize" staticNature=""><Description><![CDATA[Initialize the CachedAuthentication database. The database cannot be used until this has completed and routed an AuthenticationInitialized event. It should be called like: <pre> on AuthenticationInitialized(auth.initialize()) { // you can use auth here } </pre>]]></Description><Summary><![CDATA[Initialize the CachedAuthentication database. The database cannot be used until this has completed and routed an AuthenticationInitialized event. It should be called like: <pre> on AuthenticationInitialized(auth.initialize()) { // you can use auth here } </pre>]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"><Description><![CDATA[An ID for the associated AuthenticationInitialized completion event.]]></Description></Returns></Action><Action name="setGroups" staticNature=""><Description><![CDATA[Set the groups of a user.]]></Description><Summary><![CDATA[Set the groups of a user.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Throws><Description><![CDATA[IllegalArgumentException if the username is not found.]]></Description></Throws><Parameters><Parameter name="username" type="string"/><Parameter name="groups" type="sequence"><Parameters><Parameter type="string"/></Parameters><Description><![CDATA[The replacement groups.]]></Description></Parameter></Parameters></Action><Action name="getGroups" staticNature=""><Description><![CDATA[Return the groups for a given user.]]></Description><Summary><![CDATA[Return the groups for a given user.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Throws><Description><![CDATA[IllegalArgumentException If the username is not found.]]></Description></Throws><Returns type="sequence"><Parameters><Parameter type="string"/></Parameters><Description><![CDATA[The groups the user is a member of.]]></Description></Returns><Parameters><Parameter name="username" type="string"><Description><![CDATA[The username to check.]]></Description></Parameter></Parameters></Action></Type></Package></Packages>