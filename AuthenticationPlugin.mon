/**
 * Title:        AuthenticationPlugin.mon
 * Description:  Authentication utilities
 * Copyright (c) 2020 Software AG, Darmstadt, Germany andor its licensors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 * http:/www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.
 * See the License for the specific language governing permissions and limitations under the License.
 */

package com.apamax.authentication;

using com.softwareag.connectivity.httpclient.Request;
using com.apama.correlator.timeformat.TimeFormat;
using com.apama.memorystore.Storage;
using com.apama.memorystore.Store;
using com.apama.memorystore.Table;
using com.apama.memorystore.Finished;
using com.apama.memorystore.Row;
using com.apama.memorystore.Iterator;
using com.apama.exceptions.Exception;

/**
  Encoding and decoding support for base-64. Converts between a UTF-8 string and a base-64-encoded string.
*/
event Base64
{
	/** @private */
	import "AuthenticationPlugin" as plugin;
	/**
	  Encode a string in base-64.

	  @param s The input string.
	  @returns The string encoded in base-64.
	  @throws PluginException if the encoding failed.
	*/
	static action encode(string s) returns string
	{
		return plugin.base64encode(s);
	}
	/**
	  Decode a string from base-64.

	  @param s A base-64 encoded string.
	  @returns The decoded string.
	  @throws PluginException if the decoding failed.
	*/
	static action decode(string s) returns string
	{
		return plugin.base64decode(s);
	}
}

/**
  Read and create HTTP basic headers.
*/
event HTTPBasic
{
	/** private */
	import "AuthenticationPlugin" as plugin;

	/** Create an HTTPBasic object from an Authorization header.
		@param auth A correctly formatted Authorization header (eg "Basic mXwvknIEinIne=").
		@returns A new HTTPBasic object representing the encapsulated authentication data.
		@throws IllegalArgumentException if auth is not a properly formatted header.
	*/
	static action createFromAuth(string auth) returns HTTPBasic
	{
		if not 0 = auth.find("Basic ") {
			throw Exception("Auth string is not a basic auth string", "IllegalArgumentException");
		}
		string b64 := auth.substring(6, auth.length());
		string decoded := Base64.decode(b64);
		sequence<string> components := ":".split(decoded);
		if not 2 = components.size() {
			throw Exception("Auth string is not a basic auth string", "IllegalArgumentException");
		}
		return HTTPBasic(components[0], components[1]); 
	}

	/** Create an HTTPBasic object from a username and password.
		@returns A new HTTPBasic object representing the given authentication data.
	*/
	static action createFromCreds(string username, string password) returns HTTPBasic
	{
		return HTTPBasic(username, password);
	}

	/** Returns the username for these credentials. */
	action getUser() returns string { return username; }
	/** Returns the password for these credentials. */
	action getPassword() returns string { return password; }
	/** Returns an Authorization header for these credentials.
	  (eg "Basic mXwvknIEinIne=").
	*/
	action getAuthHeader() returns string
	{
		return "Basic "+Base64.encode(username+":"+password);
	}
	/** Adds an Authorization header to the given request.
	  @param req The request to add the header to.
	*/
	action addAuthHeader(Request req)
	{
		req.setHeader("Authorization", getAuthHeader());
	}
	/** @private */
	string username;
	/** @private */
	string password;
}

/** @private */
event User
{
	string name;
	string password;
	sequence<string> groups;
	action hasGroup(string #group) returns boolean
	{
		return groups.indexOf(#group) >= 0;
	}
}

/** 
  Event sent when an Authentication or CachedAuthentication object has finished initializing.
*/
event AuthenticationInitialized
{
	/** The ID returned from the corresponding initialize() call. */
	integer id;
}

/** @private */
event SessionCacheEntry
{
	/** @private */
	import "AuthenticationPlugin" as plugin;
	/** @private */
	string token;
	/** @private */
	string user;
	/** @private */
	float created;
	/** @private */
	float lastSeen;
	/** Create a SessionCacheEntry and generate a new token. */
	static action create(string user) returns SessionCacheEntry
	{
		SessionCacheEntry entry := new SessionCacheEntry;
		entry.user := user;
		entry.token := plugin.generateToken();
		entry.created := TimeFormat.getSystemTime();
		entry.lastSeen := entry.created;
		return entry;
	}
	/** Check the validity of a SessionCacheEntry, with the given timeout parameters. */
	action valid(float timeoutSecs, float maxSessionLengthSecs) returns boolean
	{
		float now := TimeFormat.getSystemTime();
		return created+maxSessionLengthSecs >= now and lastSeen+timeoutSecs >= now;
	}
	/** Update the last-seen timestamp on this cache entry. */
	action update()
	{
		self.lastSeen := TimeFormat.getSystemTime();
	}
}

/**
  An event which holds a cache of user sessions and tokens.
  Sessions have a timeout within which they must be refreshed to continue the session, and a maximum session length after which the session will expire even if refreshed.
	@see SessionCache#create() Session caches must be created with the create static action.
	@see SessionCache#destroy() Session caches must be destroyed with the destroy action before disposing of them.
*/
event SessionCache
{
	/** @private */
	dictionary<string, SessionCacheEntry> cache;
	/** @private */
	float timeoutSecs;
	/** @private */
	float maxSessionLengthSecs;
	/** @private */
	listener gcListener;

	/** Create a SesseionCache object.
	  @param timeoutSecs Cache entries must be checked at least once every timeoutSecs or they will expire.
	  @param maxSessionLengthSecs Cache entries will always expire after at most maxSessionLengthSecs.
	  @returns A new SessionCache.
	*/
	static action create(integer timeoutSecs, integer maxSessionLengthSecs) returns SessionCache
	{
		SessionCache cache := new SessionCache;
		cache.timeoutSecs := timeoutSecs.toFloat();
		cache.maxSessionLengthSecs := maxSessionLengthSecs.toFloat();

		// garbage collect the token cache
		cache.gcListener := on all wait(cache.timeoutSecs) {
			string token;
			for token in cache.cache.keys() {
				float now := TimeFormat.getSystemTime();
				if cache.cache[token].lastSeen+cache.timeoutSecs < now 
				or cache.cache[token].created+cache.maxSessionLengthSecs < now {
					cache.cache.remove(token);
				}
			}
		}

		return cache;
	}

	/**
	  Stop the background garbage collection listener.
	  Must be called before discarding the last reference to the SessionCache.
	*/
	action destroy()
	{
		gcListener.quit();
	}

	/** Check whether a token is a valid session.
	  If valid, refreshes the timestamp on the cache entry.
	  @param token The session token to check.
	  @returns The user for the token if valid, "" if not.
	*/
	action check(string token) returns string
	{
		if cache.hasKey(token) {
			if cache[token].valid(timeoutSecs, maxSessionLengthSecs) {
				cache[token].update();
				return cache[token].user;
			} else {
				cache.remove(token);
				return "";
			}
		} else {
			return "";
		}
	}

	/** Check whether an Authorization headers contains a valid token.
	  If valid, refreshes the timestamp on the cache entry.
	  @param token The value of the Authorization header to check.
	  @returns The user for the token if valid, "" if not.
	  @throws IllegalArgumentException if it is not a CacheToken header.
	*/
	action checkHeader(string header) returns string
	{
		if not 0 = header.find("CacheToken ") {
			throw Exception("Auth string is not a cache token string", "IllegalArgumentException");
		}
		string token := header.substring(11, header.length());
		return check(token);
	}

	/** Add a new cache entry for a user and return the token.
	  Should be called after authenticating the user via another means.
	  @param user The user to add the entry for.
	  @param token The token the user should use for future authentication.
	*/
	action add(string user) returns string
	{
		SessionCacheEntry entry := SessionCacheEntry.create(user);
		log "Adding token for "+user at DEBUG;
		cache[entry.token] := entry;
		return entry.token;
	}

	/** Remove all cache entries for a given user.
	  @param user The user to expire cache entries for.
	*/
	action expireAll(string user)
	{
		string token;
		for token in cache.keys() {
			if cache[token].user = user {
				cache.remove(token);
			}
		}
	}
}

/** An authentication database storing hashed and salted passwords in a MemoryStore database either in memory or on disk.
  @see Authentication#createFromStore() Authentication objects must be created using one of the static create actions.
  @see Authentication#createFromPath() Authentication objects must be created using one of the static create actions.
  @see Authentication#createInMemory() Authentication objects must be created using one of the static create actions.
  @see Authentication#initialize() Authentication objects must be initialized after creation using the initialize action.
*/
event Authentication
{
	/** @private */
	import "AuthenticationPlugin" as plugin;

	/** @private */
	constant integer INIT_FROM_STORE := 0;
	/** @private */
	constant integer INIT_FROM_PATH := 1;
	/** @private */
	constant integer INIT_IN_MEMORY := 2;

	/** @private */
	Storage storage;
	/** @private */
	string path;
	/** @private */
	integer initMode;
	/** @private */
	Store store;
	/** @private */
	Table users;

	/** Create an Authentication database within an already created and prepared store in the application.
	  @see Authentication#initialize() The Authentication object must be initialized after creation.
	  @param s A prepared and open Store object.
	  @returns A new Authentication object.
	*/
	static action createFromStore(Store s) returns Authentication
	{
		Authentication a := new Authentication;
		a.initMode := INIT_FROM_STORE;
		a.store := s;
		return a;
	}

	/** Create an Authentication database in the given path on disk.
	  @see Authentication#initialize() The Authentication object must be initialized after creation.
	  @param s The path to the location of the database.
	  @returns A new Authentication object.
	*/
	static action createFromPath(string path) returns Authentication
	{
		Authentication a := new Authentication;
		a.initMode := INIT_FROM_PATH;
		a.path := path;
		return a;
	}

	/** Create an Authentication database purely in memory.
	  The contents will not persist between runs of the correlator.
	  @see Authentication#initialize() The Authentication object must be initialized after creation.
	  @returns A new Authentication object.
	*/
	static action createInMemory() returns Authentication
	{
		Authentication a := new Authentication;
		a.initMode := INIT_IN_MEMORY;
		return a;
	}

	/**
	  Initialize the Authentication database. 
	  The database cannot be used until this has completed and routed an AuthenticationInitialized event. It should be called like:
<pre>
on AuthenticationInitialized(auth.initialize()) {
	// you can use auth here
}
</pre>
		@returns An ID for the associated AuthenticationInitialized completion event.
		@routes AuthenticationInitialized Routes an AuthenticationInitialized event when the asynchronous initialization completes.
	*/
	action initialize() returns integer
	{
		integer id := integer.incrementCounter("c.apx.auth.Authentication");
		if INIT_IN_MEMORY = initMode {
			on Finished(id=storage.prepareInMemory("c.apx.auth.Authentication.Memory")) {
				store := storage.open("c.apx.auth.Authentication.Memory");
				on Finished(id=store.prepareFromAny(new User)) {
					users := store.open("com.apamax.authentication.User");
					route AuthenticationInitialized(id);
				}
			}
		} else if INIT_FROM_PATH = initMode {
			on Finished(id=storage.prepareOrCreate("c.apx.auth.Authentication.Disk", path)) {
				store := storage.open("c.apx.auth.Authentication.Disk");
				on Finished(id=store.prepareFromAny(new User)) {
					users := store.open("com.apamax.authentication.User");
					route AuthenticationInitialized(id);
				}
			}
		} else if INIT_FROM_STORE = initMode {
			on Finished(id=store.prepareFromAny(new User)) {
				users := store.open("com.apamax.authentication.User");
				route AuthenticationInitialized(id);
			}
		} else {
			throw Exception("Incorrect initialization mode", "IllegalArgumentException");
		}
		return id;
	}

	/** Add a user to the authentication database.
	  Replaces an existing user's password and groups.
	  The password is stored salted and hashed using MD5 crypt() password hashing.
	  @param username The username of the new user.
	  @param password The password of the new user.
	  @param groups The groups this user is a member of.
	*/
	action addUser(string username, string password, sequence<string> groups)
	{
		Row r := users.get(username);
		r.setAll(User(username, plugin.hash(password, ""), groups));
		r.forceCommit();
		integer _ := users.persist();
		log "Added user "+username+" with groups "+groups.toString() at DEBUG;
	}

	/** Remove a user from the authentication database.
	  Does nothing silently if the user does not exist.
	  @param username The username of the user to remove.
	*/
	action removeUser(string username)
	{
		Row r := users.get(username);
		r.remove();
		r.forceCommit();
		integer _ := users.persist();
		log "Removed user "+username at DEBUG;
	}

	/** Set the password of a user.
	  @param password The new password.
	  @throws IllegalArgumentException if the username is not found.
	*/
	action setPassword(string username, string password)
	{
		Row r := users.get(username);
		if not r.inTable() {
			throw Exception("Unknown user "+username, "IllegalArgumentException");
		}
		User u := <User> r.getAll(new User);
		u.password := plugin.hash(password, "");
		r.setAll(u);
		r.forceCommit();
		integer _ := users.persist();
		log "Updated password for "+username at DEBUG;
	}

	/** Set the groups of a user.
	  @param groups The replacement groups.
	  @throws IllegalArgumentException if the username is not found.
	*/
	action setGroups(string username, sequence<string> groups)
	{
		Row r := users.get(username);
		if not r.inTable() {
			throw Exception("Unknown user "+username, "IllegalArgumentException");
		}
		User u := <User> r.getAll(new User);
		u.groups := groups;
		r.setAll(u);
		r.forceCommit();
		integer _ := users.persist();
		log "Set groups for "+username+" to "+groups.toString() at DEBUG;
	}

	/** Returns true if the database has a user of a given name.
	  @param username The name of the user to check.
	  @returns True if the database has the user, false if not.
	*/
	action hasUser(string username) returns boolean
	{
		Row r := users.get(username);
		return r.inTable();
	}

	/** Return the groups for a given user.
	  @param username The username to check.
	  @return The groups the user is a member of.
	  @throws IllegalArgumentException If the username is not found.
	*/
	action getGroups(string username) returns sequence<string>
	{
		Row r := users.get(username);
		if not r.inTable() {
			throw Exception("Unknown user "+username, "IllegalArgumentException");
		}
		User u := <User> r.getAll(new User);
		return u.groups;
	}

	/** Checks if a user is a member of a given group.
	  @param username The username to check.
	  @param #group The group to check.
	  @returns True if the username exists and is in the group, false otherwise.
	*/
	action hasGroup(string username, string #group) returns boolean
	{
		Row r := users.get(username);
		if not r.inTable() {
			return false;
		}
		User u := <User> r.getAll(new User);
		return u.hasGroup(#group);
	}

	/** Check a users password.
	  @param username The username to check.
	  @param password The password to check.
	  @returns True if the user is in the database and the password matches, false otherwise.
	*/
	action checkUser(string username, string password) returns boolean
	{
		Row r := users.get(username);
		return r.inTable() and r.getString("password") = plugin.hash(password, r.getString("password"));
	}

	/** Check an HTTP basic Authorization header against the database.
	  @param authHeader The HTTP basic header value.
	  @returns The corresponding username if the user exists and the password matches, "" otherwise.
	  @throws IllegalArgumentException If the header is not a properly formed HTTP basic header.
	*/
	action checkHeader(string authHeader) returns string
	{
		HTTPBasic basic := HTTPBasic.createFromAuth(authHeader);
		if (checkUser(basic.getUser(), basic.getPassword())) {
			return basic.getUser();
		} else {
			return "";
		}
	}

	/** Check an HTTP basic Authorization header in an HTTP Request against the database.
	  @param req The request object to check.
	  @returns The corresponding username if the user exists and the password matches, "" otherwise.
	  @throws IllegalArgumentException If the header is not a properly formed HTTP basic header.
	*/
	action checkRequest(Request req) returns string
	{
		return checkHeader(req.getHeader("Authorization"));
	}
}

/**
  The results of an auth check against a CachedAuthentication object.
  @see CachedAuthentication#checkHeader() This functions returns AuthResult objects.
*/
event AuthResult
{
	/** A result of a failed authentication. */
	constant integer AUTH_FAILED := 0;
	/** A result that authorization was not given, but is required. */
	constant integer AUTH_REQUIRED := 1;
	/** A result with an authorization token which has expired, password authentication should now be attempted. */
	constant integer TOKEN_EXPIRED := 2;
	/** A result that authentication has succeeded, but a potentially new token has been generated and should be stored and used. */
	constant integer NEW_TOKEN := 3;
	/** A result that authentication has succeeded. Also provides the token, but the expectation is that the client already has it. */
	constant integer AUTH_SUCCEEDED := 4;
	/** The result of this auth check.
	  Should be one of AUTH_FAILED, AUTH_REQUIRED, TOKEN_EXPIRED, NEW_TOKEN or AUTH_SUCCEEDED.
	  AUTH_SUCCEEDED and NEW_TOKEN are success results. 
	  AUTH_REQUIRED and TOKEN_EXPIRED are temporary failure results. 
	  AUTH_FAILED is a permanent failure result. 
	*/
	integer result;
	/** The username that was authenticated (if successful). */
	string user;
	/** A currently valid token for this user (if successful). */
	string tokenHeader;
	/** Returns true if this result contains a success outcome. */
	action success() returns boolean { return result = AUTH_SUCCEEDED or result = NEW_TOKEN; }
}

/** An authentication database storing hashed and salted passwords in a MemoryStore database either in memory or on disk. Includes a session cache for authenticating with a session token instead.
  @see CachedAuthentication#createFromStore() CachedAuthentication objects must be created using one of the static create actions.
  @see CachedAuthentication#createFromPath() CachedAuthentication objects must be created using one of the static create actions.
  @see CachedAuthentication#createInMemory() CachedAuthentication objects must be created using one of the static create actions.
  @see CachedAuthentication#initialize() CachedAuthentication objects must be initialized after creation using the initialize action.
*/
event CachedAuthentication
{
	/** @private */
	Authentication auth;
	/** @private */
	SessionCache session;

	/** Create a CachedAuthentication database within an already created and prepared store in the application.
	  @see CachedAuthentication#initialize() The CachedAuthentication object must be initialized after creation.
	  @param s A prepared and open Store object.
	  @returns A new CachedAuthentication object.
	*/
	static action createFromStore(Store s, integer timeoutSecs, integer maxSessionLengthSecs) returns CachedAuthentication
	{
		return CachedAuthentication(Authentication.createFromStore(s), SessionCache.create(timeoutSecs, maxSessionLengthSecs));
	}
	/** Create an CachedAuthentication database in the given path on disk.
	  @see CachedAuthentication#initialize() The CachedAuthentication object must be initialized after creation.
	  @param s The path to the location of the database.
	  @returns A new CachedAuthentication object.
	*/
	static action createFromPath(string path, integer timeoutSecs, integer maxSessionLengthSecs) returns CachedAuthentication
	{
		return CachedAuthentication(Authentication.createFromPath(path), SessionCache.create(timeoutSecs, maxSessionLengthSecs));
	}
	/** Create an CachedAuthentication database purely in memory.
	  The contents will not persist between runs of the correlator.
	  @see CachedAuthentication#initialize() The CachedAuthentication object must be initialized after creation.
	  @returns A new CachedAuthentication object.
	*/
	static action createInMemory(integer timeoutSecs, integer maxSessionLengthSecs) returns CachedAuthentication
	{
		return CachedAuthentication(Authentication.createInMemory(), SessionCache.create(timeoutSecs, maxSessionLengthSecs));
	}

	/**
	  Initialize the CachedAuthentication database. 
	  The database cannot be used until this has completed and routed an AuthenticationInitialized event. It should be called like:
<pre>
on AuthenticationInitialized(auth.initialize()) {
	// you can use auth here
}
</pre>
		@returns An ID for the associated AuthenticationInitialized completion event.
		@routes AuthenticationInitialized Routes an AuthenticationInitialized event when the asynchronous initialization completes.
	*/
	action initialize() returns integer
	{
		return auth.initialize();
	}

	/** Add a user to the authentication database.
	  Replaces an existing user's password.
	  The password is stored salted and hashed using MD5 crypt() password hashing.
	  @param username The username of the new user.
	  @param password The password of the new user.
	*/
	action addUser(string username, string password, sequence<string> groups)
	{
		auth.addUser(username, password, groups);
	}

	/** Remove a user from the authentication database.
	  Does nothing silently if the user does not exist.
	  @param username The username of the user to remove.
	*/
	action removeUser(string username)
	{
		auth.removeUser(username);
		session.expireAll(username);
	}

	/** Returns true if the database has a user of a given name.
	  @param username The name of the user to check.
	  @returns True if the database has the user, false if not.
	*/
	action hasUser(string username) returns boolean
	{
		return auth.hasUser(username);
	}

	/** Check a users password.
	  @param username The username to check.
	  @param password The password to check.
	  @returns True if the user is in the database and the password matches, false otherwise.
	*/
	action checkUser(string username, string password) returns boolean
	{
		return auth.checkUser(username, password);
	}

	/** Set the password of a user.
	  @param password The new password.
	  @throws IllegalArgumentException if the username is not found.
	*/
	action setPassword(string username, string password)
	{
		auth.setPassword(username, password);
	}

	/** Set the groups of a user.
	  @param groups The replacement groups.
	  @throws IllegalArgumentException if the username is not found.
	*/
	action setGroups(string username, sequence<string> groups)
	{
		auth.setGroups(username, groups);
	}

	/** Return the groups for a given user.
	  @param username The username to check.
	  @return The groups the user is a member of.
	  @throws IllegalArgumentException If the username is not found.
	*/
	action getGroups(string username) returns sequence<string>
	{
		return auth.getGroups(username);
	}

	/** Checks if a user is a member of a given group.
	  @param username The username to check.
	  @param #group The group to check.
	  @returns True if the username exists and is in the group, false otherwise.
	*/
	action hasGroup(string username, string #group) returns boolean
	{
		return auth.hasGroup(username, #group);
	}


	/** Check an HTTP Authorization header.
	  Will validate either an HTTP Basic auth header or a CacheToken session cache token.
	  @param authHeader Either an HTTP Basic auth header or a CacheToken session cache token.
	  @returns An AuthResult describing whether the header was validated, the user it corresponds to and a new authentication token to use
	  @throws IllegalArgumentException If the header is not a properly formed HTTP basic header.
	*/
	action checkHeader(string authHeader) returns AuthResult
	{
		try {
			if 0 = authHeader.find("Basic ") {
				string user := auth.checkHeader(authHeader);
				if "" = user {
					return AuthResult(AuthResult.AUTH_FAILED, user, "");
				} else {
					string token := session.add(user);
					return AuthResult(AuthResult.NEW_TOKEN, user, "CacheToken "+token);
				}
			} else if 0 = authHeader.find("CacheToken ") {
				string user := session.checkHeader(authHeader);
				if "" = user {
					return AuthResult(AuthResult.TOKEN_EXPIRED, user, "");
				} else {
					return AuthResult(AuthResult.AUTH_SUCCEEDED, user, authHeader);
				}
			} else if "" = authHeader {
				return AuthResult(AuthResult.AUTH_REQUIRED, "", "");
			} else {
				return AuthResult(AuthResult.AUTH_FAILED, "", "");
			}
		} catch (Exception e) {
			return AuthResult(AuthResult.AUTH_FAILED, "", "");
		}
	}

	/** Check the HTTP Authorization header in a Request.
	  Will validate either an HTTP Basic auth header or a CacheToken session cache token.
	  @param req The request object to check.
	  @returns An AuthResult describing whether the header was validated, the user it corresponds to and a new authentication token to use
	  @throws IllegalArgumentException If the header is not a properly formed HTTP basic header.
	*/
	action checkRequest(Request req) returns AuthResult
	{
		return checkHeader(req.getHeader("Authorization"));
	}
}


